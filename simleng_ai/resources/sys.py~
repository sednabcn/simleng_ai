# get_class_for_name, requirements

def get_class_for_name(module_name,class_name):
    import importlib
    m=importlib.import_module(module_name)
    c=getattr(m,class_name)
    return c


def requirements(package):
    """List all external/internal dependecies"""
    import sys
    import os
    import packaging
    from resources.io import find_full_path
    # Get the path of the package
    path_pack=find_full_path(package)
    # Locate all modules, and .py files
    packlist = ["simleng.py"]
    for root, dirs, files in \
        os.walk("/home/delta/Downloads/simleng_ai"):

        packlist_ = [name for name in files\
                 if name.endswith('.py') == True\
                 if name.startswith('__') == False\
                 if name.startswith('.#') == False\
                 if name.startswith('#')==False]
        if len(packlist_)>0:
            packlist.extend(packlist_)
    packlist = list(set(packlist))
    packlist.sort()
    # search each one for line to start with "from" or "import"
    PATTERNS=["from","import"]
    
    # choose the external dependences


    
